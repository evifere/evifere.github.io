(function(win, doc, edWui){

    win.tpl = function(view) {
      return _.template(doc.getElementById(view + '-viewtpl').innerHTML);
    };

    win.jsonData = function(name) {
      try{
      return doc.querySelector("[data-path='" +name + ".json']").getAttribute('src');
        }
      catch(e){
      console.error(e);
      console.log('Error on loading jsonData '+name+".json");
      }
    };

    edWui.Models = {};
    edWui.Models.Instances = {};
    edWui.Collections = {};
    edWui.Collections.Instances = {};
    edWui.Views = {};
    edWui.Views.Instances = {};
    edWui.AppRouter = {};
    edWui.AppRouter.Instance = {};
    edWui.Events = {};
    edWui.version = "1.1.2";

})(window, window.document, window.edWui || (window.edWui = {}));
// http://backbonejs.org/#View
(function(win, doc, edWui){


  /**
   * Root View
   * @type {object}
   */
  edWui.Views.HomeIndex = Backbone.View.extend({

    el: '#edWuiContainer',

    template: tpl('home'),

    events: {
        "click #gotoMemoryBoard":"gotoMemoryBoard"
    },

    initialize: function() {
    },

    render: function() {
      this.$el.html(this.template);

      return this;
    },

    gotoMemoryBoard:function(){
    edWui.AppRouter.Instance.navigate("memo/pair", {trigger: true});
    }

  });


})(window, window.document, window.edWui || (window.edWui = {}));

// http://backbonejs.org/#View
(function(win, doc, edWui) {

  /**
   * MemoIndexAccordion View
   * @type Backbone.View
   */
  edWui.Views.MemoIndexAccordion = Backbone.View.extend({

    el: '#edWuiMenu',

    template: tpl('memory-board-accordion'),

    events: {
      "click .deckLauncher": "launchMemo",
      "click .nextMenu":"showNextMenu",
      "click .dropdown-toggle-btn":"onToggleMenu"
    },

    initialize: function() {},

    /**
     * [render display accordion menu with memory launcher and the empty board default message
     */
    render: function() {

      this.$el.html(this.template({
        'boards': edWui.Collections.Instances.memoryBoard.toJSON()
      }));

      menuselector = 'edWuiMenu';

      return this;
    },

    /**
     * launchMemo load memory config and display it in ajax all back
     * @param   ev  click event
     */
    launchMemo: function(ev) {
      var datas = this.$(ev.currentTarget).data();

      this.onToggleMenu(ev);
      this.loadBoard(datas.boardfile, datas.deck)
    },

    /**
     * onToggleMenu - open close corresponding menu
     * @param  click event ev
     */
    onToggleMenu:function(ev){
      this.$(ev.currentTarget).parents('.dropdown').toggleClass('active');
    },
    /**
     * showNextMenu - show next menu items
     */
    showNextMenu: function(){
      this.$('.btn-group').toggleClass('hiddenMenu')
    },

    /**
     * loadBoard load json config for the selected board
     * @param  string jsonUrl   url of the json config file
     * @param  boolean deckIndex index of the deck
     */
    loadBoard: function(jsonUrl, deckIndex) {
      var _self = this;
      console.log('jsonUrl', jsonUrl);

      if(typeof(_cordovaNative) === 'object'){
        jsonUrl = jsonUrl.replace('/json/','json/');

        console.log('cordova detected', jsonUrl);
      }
      console.log('jsonUrl', jsonUrl);

      var jqXHR = $.getJSON(jsonUrl, function(data, textStatus, jqXHR) {

        _self.currentBoardData = data['board']['decks'][0]['deck'][deckIndex];
        _self.currentBoardTitle = data['board'].title;
        _self.currentBoardDescription = data['board'].description;

        _self.updateMemoryTitle();
        _self.drawBoard();
      }).fail(function() {
        console.error("Erreur json", "Status ", arguments, "jsonUrl " + jsonUrl);
      });
    },

    updateMemoryTitle: function() {
      var szDeckName = this.currentBoardData.$.name;

      if (this.currentBoardData.$.description)
        szDeckName += ':' + this.currentBoardData.$.description;

      $('#edWuiBoardTitle').text(this.currentBoardTitle + ' (' + this.currentBoardDescription + ')');

      $('#edWuiDeckName').attr('data-content',szDeckName);
    },

    /**
     * drawBoard display memory board
     */
    drawBoard: function() {

      var edWuiOpts = {
        data: $.booleanBridge(this.currentBoardData.couple),
        hideunselected: $.booleanBridge(this.currentBoardData.$.hideunselected, false),
        autoconfirm: false,
        autoshuffle: $.booleanBridge(this.currentBoardData.$.autoshuffle, true),
        editable: false,
        maxSelected: 2
      };

      edWuiOpts.couples = edWuiOpts.data;

      if (edWui.Views.Instances.Memory)
        edWui.Views.Instances.Memory.destroy();

      edWui.Views.Instances.Memory = new edWui.Views.Memory(edWuiOpts);
      edWui.Views.Instances.Memory.render();

    }

  });

  /**
   * MemoIndex View
   * @type Backbone.View
   */
  edWui.Views.MemoIndex = Backbone.View.extend({

    el: '#edWuiContainer',

    template: tpl('memory-board'),

    events: {
      "defaultBoard #edWuiBoardMemo": "defaultBoard"
    },

    /**
     * [initialize load micro template of default board message
     */
    initialize: function() {
      this.defaultEmptyMemoryBoard = tpl('memory-board-default');
    },

    /**
     * [render main view of memory game section
     */
    render: function() {
      this.$el.html(this.template({
        'defaultMessage': this.defaultEmptyMemoryBoard()
      }));
      return this;
    },

    /**
     * [defaultBoard draw the empty board with inviting message to click on a link
     */
    defaultBoard: function() {
      this.$('#edWuiDeckName').html(this.defaultEmptyMemoryBoard());
    }
  });


})(window, window.document, window.edWui || (window.edWui = {}));
// http://backbonejs.org/#View
(function(win, doc, edWui) {

  /**
   * Memory View
   * @type Backbone.View
   */
  edWui.Views.Memory = Backbone.View.extend({

    el: '#edWuiBoardMemo',

    template: tpl('memory-deck'),

    events: {
      "click .edWuiNotEditable": "clickOnCard",
      "click a.confirmNo": "clickOnConfirmNo",
      "click #confirmYes": "clickOnConfirmYes",
      "click .btn.btn-clear":"closeMsgToast"
    },

    initialize: function(options) {

      var _self = this;
      this.memoryOpts = options;
      this.iCards = 0;

      this.memoryOpts.couples.forEach(function(cards) {
        _self.iCards += cards.card.length;
      });

      this.currentDataGroup = -1;

      this.clearMessages();
    },

    render: function() {
      $memocontent = this.$('.memocontent');
      $memocontent.html(this.template(this.memoryOpts));

      if (this.memoryOpts.autoshuffle === true) {
        var shuffled = _.shuffle($memocontent.find('.edWuiCard').get());
        $memocontent.html(shuffled);
      }

      return this;
    },

    /**
     * clickOnCard what to do when click on a card
     * @param  click event 
     */
    clickOnCard: function(evt) {
      evt.stopPropagation();
      $couple = $(evt.currentTarget);
      this.currentDataGroup = $couple.data('group');

      if (this.toggleState($couple, this.memoryOpts.hideunselected, this.memoryOpts.maxSelected) === true) {
        if (this.$('.cardselected').length == this.memoryOpts.maxSelected) {
          this.onCardsSelected();
        }
      }

    },

    /**
     * closeMsgToast - close the toast
     * @param  Event evt - click on close button
     */
    closeMsgToast:function(evt){
      evt.stopPropagation();
      $(evt.currentTarget).parent().addClass('hiddenMsg');
    },

    /**
     * [onCardsSelected process what to do when the number of card to form a couple to select is reached
     **/
    onCardsSelected: function() {
      if (this.memoryOpts.autoconfirm === false) {
        this.onConfirmSelection();
        return true;
      }

      this.onControlCardGroup();
    },

    /**
     * clearDlgContent - empty the modal content
     * @return void
     */
    clearDlgContent: function() {
      this.$('.modal-body .content').html('');
    },

    /**
     * clearMessages - remove error and succes notifications
     * @return {[type]} [description]
     */
    clearMessages: function() {
      this.$('.toast-success').addClass('hiddenMsg');
      this.$('.toast-error').addClass('hiddenMsg');
    },

    /**
     * openDlg - open the confirmation modal for matching cards
     * @return void
     */
    openDlg: function() {
      this.$('.modal').addClass('active');
    },

    /**
     * closeDlg - close the confirmation modal
     * @return void
     */
    closeDlg: function() {
      this.$('.modal').removeClass('active');
    },

    /**
     * clickOnConfirmYes - the user confirms his choice
     * @return {[type]} [description]
     */
    clickOnConfirmYes: function() {
      this.onControlCardGroup();
      this.closeDlg();
    },

    /**
     * clickOnConfirmNo - the user is not sure of his choice the cancel
     * @return void
     */
    clickOnConfirmNo: function() {
      this.clearDlgContent();
      this.clearMessages();
      this.toggleSelectedCards();
      this.closeDlg();
    },

    /**
     * onConfirmSelection open a dialog box to ask the user if he is sure
     * @return boolean
     */
    onConfirmSelection: function() {
      var _self = this;

      this.openDlg();
      this.clearDlgContent();

      //display selected cards into the modal content
      this.$('.cardselected').each(function() {
        _self.$('.modal-body .content').append($(this).clone().removeClass('cardselected'));
      });

    },

    /**
     * [onControlCardGroup control if the selected card group match
     */
    onControlCardGroup: function() {
      var ok = true;
      var g = this.currentDataGroup;

      this.$('.cardselected').each(function() {
        ok = ok && $(this).hasClass(g);
      });

      if (ok === true)
        this.onControlCardMatch();
      else
        this.onControlCardNotMatch();

    },

    /**
     * onControlCardMatch - process what to do if the cards match
     *
     * hide the cards
     * triggers onBoardEmpty if the wole board is empty
     */
    onControlCardMatch: function() {
      this.$('.toast-error').addClass('hiddenMsg');
      this.$('.toast-success.cardMatch').removeClass('hiddenMsg');

      this.$('.cardselected').each(function() {
        $card = $(this);
        $card.removeClass('active');
        $card.removeClass('cardselected');
        $card.addClass('cardfound');
        $card.css('visibility', 'hidden');
      });

      if (this.iCards === this.$('.cardfound').length)
        this.onBoardEmpty();

    },

    /**
     * [onBoardEmpty display winning notification
     */
    onBoardEmpty: function() {
      this.$('.toast-success.endBoard').removeClass('hiddenMsg');
    },

    /**
     * onControlCardNotMatch display a user notification to say that he is wrong
     * restores unselected card state
     */
    onControlCardNotMatch: function() {
      var _self = this;

      this.$('.toast-error').removeClass('hiddenMsg');
      this.$('.toast-success.endBoard').addClass('hiddenMsg');
      this.$('.toast-success.cardMatch').addClass('hiddenMsg');
      this.toggleSelectedCards();

    },

    /**
     * toggleSelectedCards - restore the state of deselected cards
     * @return void
     */
    toggleSelectedCards:function(){
      var _self = this;

      _self.$('.cardselected').each(function() {
        _self.toggleState($(this), _self.memoryOpts.hideunselected, _self.memoryOpts.maxSelected);
      });
    },

    /**
     * [toggleState switch between un/hightlight mode and trigger couple selection
     * @param  {[type]} $card          [description]
     * @param  {[type]} hideunselected [description]
     * @param  {[type]} maxselected    [description]
     * @return {[type]}                [description]
     */
    toggleState: function($card, hideunselected, maxselected) {
      //hide card reselected
      if ($card.hasClass('active') === true) {
        $card.removeClass('active');
        $card.removeClass('cardselected');

        if (hideunselected === true)
          $card.find(':first-child').css({
            'display': 'none'
          });

        return true;
      } else { //hightlight card
        if ($('.cardselected').length < maxselected) {
          $card.addClass('active');
          $card.addClass('cardselected');

          if (hideunselected === true)
            $card.find(':first-child').css({
              'display': 'block'
            });

          return true;
        }
      }

      return false;
    },

    destroy: function() {
      this.$el.off();
    }

  });


})(window, window.document, window.edWui || (window.edWui = {}));
$(document).ready (
function ()
 {

 /**
  * booleanBridge patch the json generated from xml
  * @param  string val       value coming from the json converted from xml
  * @param  bool default value to return
  * @param  undefined ghost undefined
  * @return bool           return a real boolean
  */
 $.booleanBridge = function (val,defaultVal,undefined){

    if (defaultVal === undefined)
        defaultVal = false;

    if(typeof val === "string")
        {
        if (val === "false")
            return false;
        else
            return true;
        }

 if(val === undefined || val === null)
    {
    return defaultVal;
    }
 return val;
 };

 });//fin ready

(function(win, doc, edWui){

    edWui.AppRouter = Backbone.Router.extend({
     routes: {
      '': 'home',
      'memo/:action': 'memo',
      '*path': 'redirect404' // ALWAYS MUST BE THE LAST ROUTE
        },

        /**
     * Router init
     * @return {void}
     */
    initialize: function() {},

    /**
     * Used before every action
     * @return {void}
     */
    before: function() {},

    /**
     * Used after every action
     * @return {void}
     */
    after: function() {},

    home: function() {
      this.before();

      edWui.Views.Instances.HomeIndex = new edWui.Views.HomeIndex();
      edWui.Views.Instances.HomeIndex.render();

      this.after();
        },

     memo: function(action) {
      if(action !== 'pair')
         return this.redirect404();

      this.before();

      $.getJSON(jsonData('memo/'+action+'/boards'),function (data, textStatus, jqXHR){

        edWui.Collections.memoryBoard = Backbone.Collection.extend();;
        edWui.Collections.Instances.memoryBoard = new edWui.Collections.memoryBoard(data);

        edWui.Views.Instances.MemoIndex = new edWui.Views.MemoIndex();
        edWui.Views.Instances.MemoIndex.render();

        edWui.Views.Instances.MemoIndexAccordion = new edWui.Views.MemoIndexAccordion();
        edWui.Views.Instances.MemoIndexAccordion.render();

        });


      this.after();
        },

    redirect404:function(){
        console.warn('the requested route is unknown back to home');
        this.home();
        }

    });

})(window, window.document, window.edWui || (window.edWui = {}));


$(document).ready(function(){
// Initiate the router
edWui.AppRouter.Instance = new edWui.AppRouter;
// Start Backbone history a necessary step for bookmarkable URL's
Backbone.history.start();

});